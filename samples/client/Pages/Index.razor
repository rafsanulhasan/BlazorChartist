@page "/"

<h1>Asymptotic Behaviour</h1>
<div class="row">
    <div class="col-md-12 col-lg-4">
        <input type="checkbox" @bind="logN.Show" /> Show Logarithmic &nbsp;
        <input type="checkbox" @bind="linear.Show" /> Show Linear &nbsp;
        <input type="checkbox" @bind="nLogN.Show" /> Show nLog(n) &nbsp;
        <input type="checkbox" @bind="quadratic.Show" /> Show Quadratic &nbsp; 
        <input type="checkbox" @bind="cubic.Show" /> Show Cubic &nbsp;
        <input type="checkbox" @bind="twoToN.Show" /> Show 2^n &nbsp; 
        <input type="checkbox" @bind="factorial.Show" /> Show Factorial &nbsp;
        <br />
    </div>
    <div class="col-md-12 col-lg-8">
        <div class="row">
            <Chart Type="ChartType.Line" Labels="@labels.Values" Options="@options" class="ct-chart ct-minor-sixth">
                @if (logN.Show)
                {
                    <Series Name="Logarithmic Complexity" Values="@logN.Values" />
                }
                @if (linear.Show)
                {
                    <Series Name="Linear Complexity" Values="@linear.Values" />
                }
                @if (nLogN.Show)
                {
                    <Series Name="nLogN Complexity" Values="@nLogN.Values" />
                }
                @if (quadratic.Show)
                {
                    <Series Name="Quadratic Complexity" Values="@quadratic.Values" />
                }
                @if (cubic.Show)
                {
                    <Series Name="Cubic Complexity" Values="@cubic.Values" />
                }
                @if (twoToN.Show)
                {
                    <Series Name="2^n Complexity" Values="@twoToN.Values" />
                }
                @if (factorial.Show)
                {
                    <Series Name="2^n Complexity" Values="@factorial.Values" />
                }
            </Chart>
        </div>
        <div class="row">
            <input type="range" class="custom-range" min="2" max="150" @bind="xLimit" id="customRange" @oninput="Update">
        </div>
    </div>
</div>

@code {
    private static int xLimit = 10;

    GenericModel<string> labels = new GenericModel<string>("Size of n", ToString, xLimit);
    GenericModel<double> logN = new GenericModel<double>("Log(n) Complexity", LogN, xLimit);
    GenericModel<double> linear = new GenericModel<double>("Linear Complexity", Linear, xLimit);
    GenericModel<double> nLogN = new GenericModel<double>("n Log(n) Complexity", NLogN, xLimit);
    GenericModel<double> quadratic = new GenericModel<double>("Quadratic Complexity", Quadratic, xLimit); 
    GenericModel<double> cubic = new GenericModel<double>("Cubic Complexity", Cubic, xLimit);
    GenericModel<double> twoToN = new GenericModel<double>("2^n Complexity", TwoToN, xLimit);
    GenericModel<double> factorial = new GenericModel<double>("Factorial Complexity", Factorial, xLimit);

    private Options options = new Options();

    private void Reset()
    {
        labels.Reset(ToString, xLimit);
        quadratic.Reset(Quadratic, xLimit);
        cubic.Reset(Cubic, xLimit);
        linear.Reset(Linear, xLimit);
        logN.Reset(LogN, xLimit);
        nLogN.Reset(NLogN, xLimit);
        twoToN.Reset(TwoToN, xLimit);
        factorial.Reset(Factorial, xLimit);
    }

    static double LogN(int n, double scale) => scale *Math.Log10(n);
    static double Linear(int n, double scale) => scale * n;
    static double NLogN(int n, double scale) => scale * n * Math.Log10(n);
    static double Quadratic(int n, double scale) => scale * n * n;
    static double Cubic(int n, double scale) => scale * n * n * n;
    static double TwoToN(int n, double scale) => scale * Math.Pow(2, n);
    static double Factorial(int n, double scale) => scale * (n - 1) * n;
    static string ToString(int n, double scale) => n.ToString();

    private void Update()
    {
        labels.Update(ToString, xLimit);
        logN.Update(LogN, xLimit);
        nLogN.Update(NLogN, xLimit);
        linear.Update(Linear, xLimit);
        quadratic.Update(Quadratic, xLimit);
        cubic.Update(Cubic, xLimit);
        twoToN.Update(TwoToN, xLimit);
        factorial.Update(Factorial, xLimit);
    }
}